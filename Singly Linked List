import java.util.*;
public class SinglyLinkedL {
    private ListNode head;

    private static class ListNode {
        private int data;
        private ListNode next;

        public ListNode(int data) {

            this.data = data;
        }
    }

     public int length(){
          if(head==null){
              return 0;
          }
          int count=0;
          ListNode current=head;
          while(current!=null){
              count++;
              current=current.next;
          }
          return count;
      }
    public void display() {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.data + " --> ");
            current = current.next;
        }
        System.out.println("null");
    }

    /*public void insertFirst(int value){
        ListNode newNode=new ListNode(value);
        newNode.next=head;
        head=newNode;
    }
    public void insertLast(int value){
        ListNode newNode=new ListNode(value);
        if(head==null){
            head=newNode;
            return;
        }
        ListNode current=head;
        while(null!=current.next){
            current=current.next;
        }
        current.next=newNode;
    }
    public void insertPos(int position, int value) {
        ListNode node = new ListNode(value);
        if (position == 1) {
            node.next = head;
            head = node;
        } else {
            ListNode previous = head;
            int count = 1;
            while (count < position - 1) {
                previous = previous.next;
                count++;
            }
            ListNode current = previous.next;
            node.next = current;
            previous.next = node;
        }
    }

    public boolean find(ListNode, int searchkey) {
        if (head == null) {
            return false;
        }
        ListNode current = head;
        while (current != null) {
            if (current.data == searchkey) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
   /* public void Reverse(ListNode node){
        if (node.next != null) {
            Reverse(node.next);
        }
        System.out.println(node.data);
    }*/
   /* public ListNode deleteFirst(){
        if(head==null){
            return null;
        }
        ListNode temp=head;
        head=head.next;
        temp.next=null;
        return temp;
    }
    public ListNode deleteLast(){
        if(head==null||head.next==null){
            return head;
        }
        ListNode current=head;
        ListNode previous=null;
        while(current.next!=null){
            previous=current;
            current=current.next;
        }
        previous.next=null;
        return current;
    }
    public void deletePos(int position){
        if(position==1){
            head=head.next;
        }
        else{
            ListNode previous=head;
            int count=1;
            while(count<position-1){
                previous=previous.next;
                count++;
            }
            ListNode current=previous.next;
            previous.next=current.next;
        }
    }*/

  /*  public static void main(String[] args) {
        SinglyLinkedL sll = new SinglyLinkedL();
        sll.head = new ListNode(10);
        ListNode Second = new ListNode(15);
        ListNode Third = new ListNode(18);
        ListNode fourth = new ListNode(11);
        sll.head.next = Second;
        Second.next = Third;
        Third.next = fourth;
        //  sll.insertLast(29);

        //sll.insertFirst(11);
        // sll.insertFirst(245);
        //sll.insertLast(122);
        //sll.insertLast(21);
        sll.insertPos(3, 5);
        sll.insertPos(7, 28);
        sll.insertPos(9, 31);
        if (sll.find(1)) {
            System.out.println("Found..!!!!");
        } else {
            System.out.println("Not Found..!!!");
        }
    }
    // sll.display();
    // System.out.println(sll.length());
       System.out.println(sll.deleteFirst().data);
        System.out.println(sll.deleteFirst().data);
        System.out.println(sll.deleteLast().data);
        System.out.println(sll.deleteLast().data);
    //sll.deletePos(3);
    // System.out.println(sll.Reverse(5));
    // sll.display();

    }
}
